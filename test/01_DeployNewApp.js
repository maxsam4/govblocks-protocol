const MemberRoles = artifacts.require('MemberRoles');
const GovBlocksMaster = artifacts.require('GovBlocksMaster');
const Master = artifacts.require('Master');
const GBTStandardToken = artifacts.require('GBTStandardToken');
const Governance = artifacts.require('Governance');
const GovernanceData = artifacts.require('GovernanceData');
const Pool = artifacts.require('Pool');
const ProposalCategory = artifacts.require('ProposalCategory');
const SimpleVoting = artifacts.require('SimpleVoting');
const EventCaller = artifacts.require('EventCaller');
const ProposalCategoryAdder = artifacts.require('ProposalCategoryAdder');
let gbts;
let gbm;
let ec;
let gd;
let mr;
let pc;
let sv;
let gv;
let pl;
let add = [];
let ms;
let pca;
const json = require('./../build/contracts/Master.json');
const bytecode = json.bytecode;

describe('Deploy new dApp', () => {

  it('should create a new dApp', async function() {
    this.timeout(100000);
    gbm = await GovBlocksMaster.new();
    gbts = await GBTStandardToken.new();
    ec = await EventCaller.new();
    await gbm.govBlocksMasterInit(gbts.address, ec.address);
    await gbm.setMasterByteCode(bytecode);
    await gbm.addGovBlocksUser('0x42', gbts.address, 'descHash');
    gd = await GovernanceData.new();
    mr = await MemberRoles.new();
    pc = await ProposalCategory.new();
    sv = await SimpleVoting.new();
    gv = await Governance.new();
    pl = await Pool.new();
    const owner = await gbm.owner();
    await mr.memberRolesInitiate('0x42', gbts.address, owner);
    await pc.proposalCategoryInitiate('0x42');
    add.push(gd.address);
    add.push(mr.address);
    add.push(pc.address);
    add.push(sv.address);
    add.push(gv.address);
    add.push(pl.address);
    const mad = await gbm.getDappMasterAddress('0x42');
    ms = await Master.at(mad);
    await ms.addNewVersion(add);
    const cv = await ms.getCurrentVersion();
    assert.equal(cv.toNumber(), 1, 'dApp version not created');
  });
});